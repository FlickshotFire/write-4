[
  {
    "id": "1",
    "title": "Building Neural Networks with TensorFlow: A Complete Guide",
    "excerpt": "Explore the fundamentals of neural network architecture and learn how to implement powerful AI models using TensorFlow and modern best practices.",
    "content": "# Building Neural Networks with TensorFlow: A Complete Guide\n\nIn this comprehensive guide, we'll explore the fascinating world of neural networks and learn how to implement them using TensorFlow, one of the most powerful machine learning frameworks available today.\n\n## Introduction to Neural Networks\n\nNeural networks are computational models inspired by the biological neural networks found in animal brains. They consist of interconnected nodes (neurons) that process and transmit information.\n\n## Getting Started with TensorFlow\n\nTensorFlow is an open-source machine learning library developed by Google. It provides a comprehensive ecosystem for building and deploying machine learning models.\n\n### Installation\n\n```python\npip install tensorflow\n```\n\n### Basic Concepts\n\n1. **Tensors**: Multi-dimensional arrays that represent data\n2. **Operations**: Mathematical operations performed on tensors\n3. **Graphs**: Computational graphs that define the flow of operations\n\n## Building Your First Neural Network\n\nLet's create a simple neural network for image classification:\n\n```python\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Create a sequential model\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n```\n\n## Conclusion\n\nNeural networks with TensorFlow offer incredible possibilities for solving complex problems. With proper understanding and practice, you can build powerful AI models that can revolutionize your applications.",
    "category": "AI Development",
    "readTime": "5 min read",
    "imageUrl": "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
    "likes": 127,
    "comments": 23,
    "createdAt": "2024-09-03T00:00:00.000Z"
  },
  {
    "id": "2",
    "title": "Modern React Patterns: From Hooks to Server Components",
    "excerpt": "Discover the evolution of React development patterns and learn how to leverage the latest features for building performant applications.",
    "content": "# Modern React Patterns: From Hooks to Server Components\n\nReact has evolved significantly since its inception, introducing powerful patterns that have transformed how we build user interfaces. Let's explore the modern React ecosystem and understand how to leverage these patterns effectively.\n\n## The Evolution of React\n\nReact has grown from a simple library for building user interfaces to a comprehensive ecosystem that enables developers to build complex, performant applications.\n\n### From Class Components to Hooks\n\nThe introduction of hooks in React 16.8 revolutionized component development.\n\n## Custom Hooks for Reusability\n\nCustom hooks allow you to extract component logic into reusable functions.\n\n## Performance Optimization\n\n### React.memo and useMemo\n\nPrevent unnecessary re-renders with memoization.\n\n## Conclusion\n\nModern React patterns provide powerful tools for building scalable, performant applications. By understanding and implementing these patterns, you can create better user experiences and more maintainable codebases.",
    "category": "Web Development",
    "readTime": "8 min read",
    "imageUrl": "https://images.unsplash.com/photo-1504639725590-34d0984388bd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
    "likes": 89,
    "comments": 15,
    "createdAt": "2024-09-02T00:00:00.000Z"
  },
  {
    "id": "3",
    "title": "Data Structures & Algorithms: Complete Interview Preparation",
    "excerpt": "Master essential DSA concepts with comprehensive explanations, code examples, and practical problem-solving techniques for technical interviews.",
    "content": "# Data Structures & Algorithms: Complete Interview Preparation\n\nMaster the fundamental concepts that form the backbone of computer science and software engineering. This comprehensive guide covers everything you need to excel in technical interviews.\n\n## Core Data Structures\n\n### Arrays and Strings\nLearn about static and dynamic arrays, string manipulation techniques, and common algorithms.\n\n### Linked Lists\nUnderstand singly, doubly, and circular linked lists with implementation details.\n\n### Trees and Graphs\nExplore binary trees, BST, AVL trees, and graph traversal algorithms.\n\n## Essential Algorithms\n\n### Sorting and Searching\nMaster quicksort, mergesort, binary search, and their time complexities.\n\n### Dynamic Programming\nSolve complex problems by breaking them into subproblems with memoization.\n\n## Interview Strategies\n\n1. **Problem Analysis**: Break down complex problems step by step\n2. **Time Complexity**: Always analyze and optimize your solutions\n3. **Space Optimization**: Consider memory usage in your implementations\n4. **Edge Cases**: Think about boundary conditions and error handling\n\n## Conclusion\n\nMastering DSA is crucial for technical interviews and becoming a better programmer. Practice consistently and focus on understanding rather than memorization.",
    "category": "DSA",
    "readTime": "12 min read",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400",
    "likes": 234,
    "comments": 56,
    "createdAt": "2024-09-01T00:00:00.000Z"
  }
]